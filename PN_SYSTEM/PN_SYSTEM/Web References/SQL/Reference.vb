'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Data
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
'
Namespace SQL
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="sqlsrkerSoap", [Namespace]:="http://tempuri.org/")>  _
    Partial Public Class sqlsrker
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private RunStoredProcedure_Table_RunSQLSRKEROperationCompleted As System.Threading.SendOrPostCallback
        
        Private RunStoredProcedure_RunSQLSRKEROperationCompleted As System.Threading.SendOrPostCallback
        
        Private RunSQLOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SelectSQLOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SelectSQLGetComponentOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SelectSQL_jsonOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.PN_SYSTEM.My.MySettings.Default.PN_SYSTEM_SQL_sqlsrker
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event RunStoredProcedure_Table_RunSQLSRKERCompleted As RunStoredProcedure_Table_RunSQLSRKERCompletedEventHandler
        
        '''<remarks/>
        Public Event RunStoredProcedure_RunSQLSRKERCompleted As RunStoredProcedure_RunSQLSRKERCompletedEventHandler
        
        '''<remarks/>
        Public Event RunSQLCompleted As RunSQLCompletedEventHandler
        
        '''<remarks/>
        Public Event SelectSQLCompleted As SelectSQLCompletedEventHandler
        
        '''<remarks/>
        Public Event SelectSQLGetComponentCompleted As SelectSQLGetComponentCompletedEventHandler
        
        '''<remarks/>
        Public Event SelectSQL_jsonCompleted As SelectSQL_jsonCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RunStoredProcedure_Table_RunSQLSRKER", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function RunStoredProcedure_Table_RunSQLSRKER(ByVal StoredProcedureName As String, ByVal _datatable As System.Data.DataTable) As Boolean
            Dim results() As Object = Me.Invoke("RunStoredProcedure_Table_RunSQLSRKER", New Object() {StoredProcedureName, _datatable})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub RunStoredProcedure_Table_RunSQLSRKERAsync(ByVal StoredProcedureName As String, ByVal _datatable As System.Data.DataTable)
            Me.RunStoredProcedure_Table_RunSQLSRKERAsync(StoredProcedureName, _datatable, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RunStoredProcedure_Table_RunSQLSRKERAsync(ByVal StoredProcedureName As String, ByVal _datatable As System.Data.DataTable, ByVal userState As Object)
            If (Me.RunStoredProcedure_Table_RunSQLSRKEROperationCompleted Is Nothing) Then
                Me.RunStoredProcedure_Table_RunSQLSRKEROperationCompleted = AddressOf Me.OnRunStoredProcedure_Table_RunSQLSRKEROperationCompleted
            End If
            Me.InvokeAsync("RunStoredProcedure_Table_RunSQLSRKER", New Object() {StoredProcedureName, _datatable}, Me.RunStoredProcedure_Table_RunSQLSRKEROperationCompleted, userState)
        End Sub
        
        Private Sub OnRunStoredProcedure_Table_RunSQLSRKEROperationCompleted(ByVal arg As Object)
            If (Not (Me.RunStoredProcedure_Table_RunSQLSRKERCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent RunStoredProcedure_Table_RunSQLSRKERCompleted(Me, New RunStoredProcedure_Table_RunSQLSRKERCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RunStoredProcedure_RunSQLSRKER", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function RunStoredProcedure_RunSQLSRKER(ByVal StoredProcedureName As String) As Boolean
            Dim results() As Object = Me.Invoke("RunStoredProcedure_RunSQLSRKER", New Object() {StoredProcedureName})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub RunStoredProcedure_RunSQLSRKERAsync(ByVal StoredProcedureName As String)
            Me.RunStoredProcedure_RunSQLSRKERAsync(StoredProcedureName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RunStoredProcedure_RunSQLSRKERAsync(ByVal StoredProcedureName As String, ByVal userState As Object)
            If (Me.RunStoredProcedure_RunSQLSRKEROperationCompleted Is Nothing) Then
                Me.RunStoredProcedure_RunSQLSRKEROperationCompleted = AddressOf Me.OnRunStoredProcedure_RunSQLSRKEROperationCompleted
            End If
            Me.InvokeAsync("RunStoredProcedure_RunSQLSRKER", New Object() {StoredProcedureName}, Me.RunStoredProcedure_RunSQLSRKEROperationCompleted, userState)
        End Sub
        
        Private Sub OnRunStoredProcedure_RunSQLSRKEROperationCompleted(ByVal arg As Object)
            If (Not (Me.RunStoredProcedure_RunSQLSRKERCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent RunStoredProcedure_RunSQLSRKERCompleted(Me, New RunStoredProcedure_RunSQLSRKERCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RunSQL", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function RunSQL(ByVal SQL As String) As Boolean
            Dim results() As Object = Me.Invoke("RunSQL", New Object() {SQL})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub RunSQLAsync(ByVal SQL As String)
            Me.RunSQLAsync(SQL, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RunSQLAsync(ByVal SQL As String, ByVal userState As Object)
            If (Me.RunSQLOperationCompleted Is Nothing) Then
                Me.RunSQLOperationCompleted = AddressOf Me.OnRunSQLOperationCompleted
            End If
            Me.InvokeAsync("RunSQL", New Object() {SQL}, Me.RunSQLOperationCompleted, userState)
        End Sub
        
        Private Sub OnRunSQLOperationCompleted(ByVal arg As Object)
            If (Not (Me.RunSQLCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent RunSQLCompleted(Me, New RunSQLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SelectSQL", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SelectSQL(ByVal SQL As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("SelectSQL", New Object() {SQL})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SelectSQLAsync(ByVal SQL As String)
            Me.SelectSQLAsync(SQL, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SelectSQLAsync(ByVal SQL As String, ByVal userState As Object)
            If (Me.SelectSQLOperationCompleted Is Nothing) Then
                Me.SelectSQLOperationCompleted = AddressOf Me.OnSelectSQLOperationCompleted
            End If
            Me.InvokeAsync("SelectSQL", New Object() {SQL}, Me.SelectSQLOperationCompleted, userState)
        End Sub
        
        Private Sub OnSelectSQLOperationCompleted(ByVal arg As Object)
            If (Not (Me.SelectSQLCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SelectSQLCompleted(Me, New SelectSQLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SelectSQLGetComponent", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SelectSQLGetComponent(ByVal partno As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("SelectSQLGetComponent", New Object() {partno})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SelectSQLGetComponentAsync(ByVal partno As String)
            Me.SelectSQLGetComponentAsync(partno, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SelectSQLGetComponentAsync(ByVal partno As String, ByVal userState As Object)
            If (Me.SelectSQLGetComponentOperationCompleted Is Nothing) Then
                Me.SelectSQLGetComponentOperationCompleted = AddressOf Me.OnSelectSQLGetComponentOperationCompleted
            End If
            Me.InvokeAsync("SelectSQLGetComponent", New Object() {partno}, Me.SelectSQLGetComponentOperationCompleted, userState)
        End Sub
        
        Private Sub OnSelectSQLGetComponentOperationCompleted(ByVal arg As Object)
            If (Not (Me.SelectSQLGetComponentCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SelectSQLGetComponentCompleted(Me, New SelectSQLGetComponentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SelectSQL_json", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SelectSQL_json(ByVal SQL As String) As String
            Dim results() As Object = Me.Invoke("SelectSQL_json", New Object() {SQL})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SelectSQL_jsonAsync(ByVal SQL As String)
            Me.SelectSQL_jsonAsync(SQL, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SelectSQL_jsonAsync(ByVal SQL As String, ByVal userState As Object)
            If (Me.SelectSQL_jsonOperationCompleted Is Nothing) Then
                Me.SelectSQL_jsonOperationCompleted = AddressOf Me.OnSelectSQL_jsonOperationCompleted
            End If
            Me.InvokeAsync("SelectSQL_json", New Object() {SQL}, Me.SelectSQL_jsonOperationCompleted, userState)
        End Sub
        
        Private Sub OnSelectSQL_jsonOperationCompleted(ByVal arg As Object)
            If (Not (Me.SelectSQL_jsonCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SelectSQL_jsonCompleted(Me, New SelectSQL_jsonCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub RunStoredProcedure_Table_RunSQLSRKERCompletedEventHandler(ByVal sender As Object, ByVal e As RunStoredProcedure_Table_RunSQLSRKERCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class RunStoredProcedure_Table_RunSQLSRKERCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub RunStoredProcedure_RunSQLSRKERCompletedEventHandler(ByVal sender As Object, ByVal e As RunStoredProcedure_RunSQLSRKERCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class RunStoredProcedure_RunSQLSRKERCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub RunSQLCompletedEventHandler(ByVal sender As Object, ByVal e As RunSQLCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class RunSQLCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub SelectSQLCompletedEventHandler(ByVal sender As Object, ByVal e As SelectSQLCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SelectSQLCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub SelectSQLGetComponentCompletedEventHandler(ByVal sender As Object, ByVal e As SelectSQLGetComponentCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SelectSQLGetComponentCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub SelectSQL_jsonCompletedEventHandler(ByVal sender As Object, ByVal e As SelectSQL_jsonCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SelectSQL_jsonCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
End Namespace
